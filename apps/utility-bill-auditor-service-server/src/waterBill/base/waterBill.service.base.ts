/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, WaterBill as PrismaWaterBill } from "@prisma/client";

export class WaterBillServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WaterBillCountArgs, "select">
  ): Promise<number> {
    return this.prisma.waterBill.count(args);
  }

  async waterBills<T extends Prisma.WaterBillFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WaterBillFindManyArgs>
  ): Promise<PrismaWaterBill[]> {
    return this.prisma.waterBill.findMany<Prisma.WaterBillFindManyArgs>(args);
  }
  async waterBill<T extends Prisma.WaterBillFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WaterBillFindUniqueArgs>
  ): Promise<PrismaWaterBill | null> {
    return this.prisma.waterBill.findUnique(args);
  }
  async createWaterBill<T extends Prisma.WaterBillCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WaterBillCreateArgs>
  ): Promise<PrismaWaterBill> {
    return this.prisma.waterBill.create<T>(args);
  }
  async updateWaterBill<T extends Prisma.WaterBillUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WaterBillUpdateArgs>
  ): Promise<PrismaWaterBill> {
    return this.prisma.waterBill.update<T>(args);
  }
  async deleteWaterBill<T extends Prisma.WaterBillDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.WaterBillDeleteArgs>
  ): Promise<PrismaWaterBill> {
    return this.prisma.waterBill.delete(args);
  }
}
