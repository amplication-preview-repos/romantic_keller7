/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WaterBillService } from "../waterBill.service";
import { WaterBillCreateInput } from "./WaterBillCreateInput";
import { WaterBill } from "./WaterBill";
import { WaterBillFindManyArgs } from "./WaterBillFindManyArgs";
import { WaterBillWhereUniqueInput } from "./WaterBillWhereUniqueInput";
import { WaterBillUpdateInput } from "./WaterBillUpdateInput";

export class WaterBillControllerBase {
  constructor(protected readonly service: WaterBillService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WaterBill })
  async createWaterBill(
    @common.Body() data: WaterBillCreateInput
  ): Promise<WaterBill> {
    return await this.service.createWaterBill({
      data: data,
      select: {
        amount: true,
        createdAt: true,
        date: true,
        id: true,
        provider: true,
        updatedAt: true,
        usage: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [WaterBill] })
  @ApiNestedQuery(WaterBillFindManyArgs)
  async waterBills(@common.Req() request: Request): Promise<WaterBill[]> {
    const args = plainToClass(WaterBillFindManyArgs, request.query);
    return this.service.waterBills({
      ...args,
      select: {
        amount: true,
        createdAt: true,
        date: true,
        id: true,
        provider: true,
        updatedAt: true,
        usage: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WaterBill })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async waterBill(
    @common.Param() params: WaterBillWhereUniqueInput
  ): Promise<WaterBill | null> {
    const result = await this.service.waterBill({
      where: params,
      select: {
        amount: true,
        createdAt: true,
        date: true,
        id: true,
        provider: true,
        updatedAt: true,
        usage: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WaterBill })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWaterBill(
    @common.Param() params: WaterBillWhereUniqueInput,
    @common.Body() data: WaterBillUpdateInput
  ): Promise<WaterBill | null> {
    try {
      return await this.service.updateWaterBill({
        where: params,
        data: data,
        select: {
          amount: true,
          createdAt: true,
          date: true,
          id: true,
          provider: true,
          updatedAt: true,
          usage: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WaterBill })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWaterBill(
    @common.Param() params: WaterBillWhereUniqueInput
  ): Promise<WaterBill | null> {
    try {
      return await this.service.deleteWaterBill({
        where: params,
        select: {
          amount: true,
          createdAt: true,
          date: true,
          id: true,
          provider: true,
          updatedAt: true,
          usage: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
