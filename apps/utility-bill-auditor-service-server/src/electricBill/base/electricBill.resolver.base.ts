/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ElectricBill } from "./ElectricBill";
import { ElectricBillCountArgs } from "./ElectricBillCountArgs";
import { ElectricBillFindManyArgs } from "./ElectricBillFindManyArgs";
import { ElectricBillFindUniqueArgs } from "./ElectricBillFindUniqueArgs";
import { CreateElectricBillArgs } from "./CreateElectricBillArgs";
import { UpdateElectricBillArgs } from "./UpdateElectricBillArgs";
import { DeleteElectricBillArgs } from "./DeleteElectricBillArgs";
import { ElectricBillService } from "../electricBill.service";
@graphql.Resolver(() => ElectricBill)
export class ElectricBillResolverBase {
  constructor(protected readonly service: ElectricBillService) {}

  async _electricBillsMeta(
    @graphql.Args() args: ElectricBillCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ElectricBill])
  async electricBills(
    @graphql.Args() args: ElectricBillFindManyArgs
  ): Promise<ElectricBill[]> {
    return this.service.electricBills(args);
  }

  @graphql.Query(() => ElectricBill, { nullable: true })
  async electricBill(
    @graphql.Args() args: ElectricBillFindUniqueArgs
  ): Promise<ElectricBill | null> {
    const result = await this.service.electricBill(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ElectricBill)
  async createElectricBill(
    @graphql.Args() args: CreateElectricBillArgs
  ): Promise<ElectricBill> {
    return await this.service.createElectricBill({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ElectricBill)
  async updateElectricBill(
    @graphql.Args() args: UpdateElectricBillArgs
  ): Promise<ElectricBill | null> {
    try {
      return await this.service.updateElectricBill({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ElectricBill)
  async deleteElectricBill(
    @graphql.Args() args: DeleteElectricBillArgs
  ): Promise<ElectricBill | null> {
    try {
      return await this.service.deleteElectricBill(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
