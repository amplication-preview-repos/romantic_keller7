/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ElectricBillService } from "../electricBill.service";
import { ElectricBillCreateInput } from "./ElectricBillCreateInput";
import { ElectricBill } from "./ElectricBill";
import { ElectricBillFindManyArgs } from "./ElectricBillFindManyArgs";
import { ElectricBillWhereUniqueInput } from "./ElectricBillWhereUniqueInput";
import { ElectricBillUpdateInput } from "./ElectricBillUpdateInput";

export class ElectricBillControllerBase {
  constructor(protected readonly service: ElectricBillService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ElectricBill })
  async createElectricBill(
    @common.Body() data: ElectricBillCreateInput
  ): Promise<ElectricBill> {
    return await this.service.createElectricBill({
      data: data,
      select: {
        amount: true,
        createdAt: true,
        date: true,
        id: true,
        provider: true,
        updatedAt: true,
        usage: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ElectricBill] })
  @ApiNestedQuery(ElectricBillFindManyArgs)
  async electricBills(@common.Req() request: Request): Promise<ElectricBill[]> {
    const args = plainToClass(ElectricBillFindManyArgs, request.query);
    return this.service.electricBills({
      ...args,
      select: {
        amount: true,
        createdAt: true,
        date: true,
        id: true,
        provider: true,
        updatedAt: true,
        usage: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ElectricBill })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async electricBill(
    @common.Param() params: ElectricBillWhereUniqueInput
  ): Promise<ElectricBill | null> {
    const result = await this.service.electricBill({
      where: params,
      select: {
        amount: true,
        createdAt: true,
        date: true,
        id: true,
        provider: true,
        updatedAt: true,
        usage: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ElectricBill })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateElectricBill(
    @common.Param() params: ElectricBillWhereUniqueInput,
    @common.Body() data: ElectricBillUpdateInput
  ): Promise<ElectricBill | null> {
    try {
      return await this.service.updateElectricBill({
        where: params,
        data: data,
        select: {
          amount: true,
          createdAt: true,
          date: true,
          id: true,
          provider: true,
          updatedAt: true,
          usage: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ElectricBill })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteElectricBill(
    @common.Param() params: ElectricBillWhereUniqueInput
  ): Promise<ElectricBill | null> {
    try {
      return await this.service.deleteElectricBill({
        where: params,
        select: {
          amount: true,
          createdAt: true,
          date: true,
          id: true,
          provider: true,
          updatedAt: true,
          usage: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
