/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { GasBill } from "./GasBill";
import { GasBillCountArgs } from "./GasBillCountArgs";
import { GasBillFindManyArgs } from "./GasBillFindManyArgs";
import { GasBillFindUniqueArgs } from "./GasBillFindUniqueArgs";
import { CreateGasBillArgs } from "./CreateGasBillArgs";
import { UpdateGasBillArgs } from "./UpdateGasBillArgs";
import { DeleteGasBillArgs } from "./DeleteGasBillArgs";
import { GasBillService } from "../gasBill.service";
@graphql.Resolver(() => GasBill)
export class GasBillResolverBase {
  constructor(protected readonly service: GasBillService) {}

  async _gasBillsMeta(
    @graphql.Args() args: GasBillCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [GasBill])
  async gasBills(
    @graphql.Args() args: GasBillFindManyArgs
  ): Promise<GasBill[]> {
    return this.service.gasBills(args);
  }

  @graphql.Query(() => GasBill, { nullable: true })
  async gasBill(
    @graphql.Args() args: GasBillFindUniqueArgs
  ): Promise<GasBill | null> {
    const result = await this.service.gasBill(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GasBill)
  async createGasBill(
    @graphql.Args() args: CreateGasBillArgs
  ): Promise<GasBill> {
    return await this.service.createGasBill({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => GasBill)
  async updateGasBill(
    @graphql.Args() args: UpdateGasBillArgs
  ): Promise<GasBill | null> {
    try {
      return await this.service.updateGasBill({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GasBill)
  async deleteGasBill(
    @graphql.Args() args: DeleteGasBillArgs
  ): Promise<GasBill | null> {
    try {
      return await this.service.deleteGasBill(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
