/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GasBillService } from "../gasBill.service";
import { GasBillCreateInput } from "./GasBillCreateInput";
import { GasBill } from "./GasBill";
import { GasBillFindManyArgs } from "./GasBillFindManyArgs";
import { GasBillWhereUniqueInput } from "./GasBillWhereUniqueInput";
import { GasBillUpdateInput } from "./GasBillUpdateInput";

export class GasBillControllerBase {
  constructor(protected readonly service: GasBillService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GasBill })
  async createGasBill(
    @common.Body() data: GasBillCreateInput
  ): Promise<GasBill> {
    return await this.service.createGasBill({
      data: data,
      select: {
        amount: true,
        createdAt: true,
        date: true,
        id: true,
        provider: true,
        updatedAt: true,
        usage: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GasBill] })
  @ApiNestedQuery(GasBillFindManyArgs)
  async gasBills(@common.Req() request: Request): Promise<GasBill[]> {
    const args = plainToClass(GasBillFindManyArgs, request.query);
    return this.service.gasBills({
      ...args,
      select: {
        amount: true,
        createdAt: true,
        date: true,
        id: true,
        provider: true,
        updatedAt: true,
        usage: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GasBill })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async gasBill(
    @common.Param() params: GasBillWhereUniqueInput
  ): Promise<GasBill | null> {
    const result = await this.service.gasBill({
      where: params,
      select: {
        amount: true,
        createdAt: true,
        date: true,
        id: true,
        provider: true,
        updatedAt: true,
        usage: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GasBill })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGasBill(
    @common.Param() params: GasBillWhereUniqueInput,
    @common.Body() data: GasBillUpdateInput
  ): Promise<GasBill | null> {
    try {
      return await this.service.updateGasBill({
        where: params,
        data: data,
        select: {
          amount: true,
          createdAt: true,
          date: true,
          id: true,
          provider: true,
          updatedAt: true,
          usage: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GasBill })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGasBill(
    @common.Param() params: GasBillWhereUniqueInput
  ): Promise<GasBill | null> {
    try {
      return await this.service.deleteGasBill({
        where: params,
        select: {
          amount: true,
          createdAt: true,
          date: true,
          id: true,
          provider: true,
          updatedAt: true,
          usage: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
